AWSTemplateFormatVersion: 2010-09-09
# This CloudFormation template deploys a basic VPC / Network.  Specifically:
# It deploys a VPC with 4 subnets (2 public, 2 private) across 2 Availability Zones
# A NAT Gateway is used to provide egress for private subnets.
# The VPC and subnets are exported for use by other stacks.
Parameters:
  SystemName:
    Type: String
    Description: Specify system name. The following constraints applied between 3 - 8 characters, lowercase alphanumeric and use for send it in to User Data init cloud for EC2
  AdminPassword:
    Description: Password for the Administrator for send it in to User Data init cloud for EC2
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SecurityGroupName:
    Description: Name of the security group
    Type: String 
  SecurityGroupName2:
    Description: Name of the security group2
    Type: String 
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  AdditionalEBSVolume:
    Description: The addtional disk size
    Default: 10
    Type: String
  StaticPrivateIP:
    Type: String
    Default: 10.1.10.56
    Description: First instance private IP. This must be a valid IP address for Subnet
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
  StaticPrivateIP2:
    Type: String
    Default: 10.1.20.88
    Description: Second instance private IP. This must be a valid IP address for Subnet
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
  S3BucketLocation:
    Type: String
    Description: Please input the userdata location from s3 example 's3://hui-cloud-aha/bash.sh'
  S3BucketRegion:
    Type: String
    Description: Input the S3bucket region for example 'us-east-1'
    Default: us-east-1
  UserDataArgument1:
    Type: String
    Description: Please input userdata argument1
  UserDataArgument2:
    Type: String
    Description: Please input userdata argument2
  UserDataArgument3:
    Type: String
    Description: Please input userdata argument3


Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceIAMRole
  InstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - "*"
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*
      - PolicyName: fullec2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            Resource:
            - "*"

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      #SecurityGroupIds: [!Ref 'InstanceSecurityGroup']
      # SubnetId: !Ref PublicSubnetA
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref 'Eth0'
        DeviceIndex: '0'
      ImageId: !Ref 'LatestAmiId'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '30'
            DeleteOnTermination: 'true'
            Encrypted: 'true'
      UserData:
           'Fn::Base64': 
              !Sub |
                #!/bin/bash -xe

                hostnamectl set-hostname ${ SystemName }

                echo ${ AdminPassword } | passwd --stdin root

                export USERDATAD_BUCKET=${ S3BucketLocation }
                yum install -y aws-cli
                aws s3 ls $USERDATAD_BUCKET | awk '{ print  $4 }'

                mkdir -p /opt/bash/log
                mkdir -p /opt/bash/bin
                aws s3 cp $USERDATAD_BUCKET /opt/bash/bin/update_instance.sh --region=${ S3BucketRegion } &> /opt/bash/log/firstrun.log
                chmod +x /opt/bash/bin/update_instance.sh
                /opt/bash/bin/update_instance.sh &>> /opt/bash/log/firstrun.log

                EC2_INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)

                DATA_STATE="unknown"
                until [ "${!DATA_STATE}" == "attached" ]; do
                  DATA_STATE=$(aws ec2 describe-volumes \
                  --region ${AWS::Region} \
                  --filters \
                      Name=attachment.instance-id,Values=${!EC2_INSTANCE_ID} \
                      Name=attachment.device,Values=/dev/xvdb \
                  --query Volumes[].Attachments[].State \
                  --output text)

                  sleep 5
                done

                mkfs -t ext4 /dev/xvdb
                mkdir -p /data
                mount /dev/xvdb /data

                echo '/dev/xvdb /data ext4 defaults,nofail 0 2' >> /etc/fstab

                ${ UserDataArgument1 }
                ${ UserDataArgument2 }
                ${ UserDataArgument3 }

      Tags:
        - Key: Name
          Value: Instance1

  IPAddress1:
    Type: AWS::EC2::EIP
  IPAssoc1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'EC2Instance1'
      EIP: !Ref 'IPAddress1'

  Eth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0 for instance 1
      GroupSet: [!Ref 'InstanceSecurityGroup']
      PrivateIpAddresses:
      - PrivateIpAddress: !Ref 'StaticPrivateIP'
        Primary: 'true'
      SourceDestCheck: 'true'
      SubnetId: !ImportValue SubnetA
      Tags:
      - Key: Name
        Value: Interface 0
      - Key: Interface
        Value: eth0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VpcId
      GroupDescription: Enable SSH access via port 22
      GroupName: !Ref SecurityGroupName
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'

  Instance1Volume:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref AdditionalEBSVolume
      AvailabilityZone: !GetAtt EC2Instance1.AvailabilityZone
      Tags:
        - Key: Name
          Value: Instance1Volume2

  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EC2Instance1
      VolumeId: !Ref Instance1Volume
      Device: /dev/xvdb

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance1'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance1, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance1, PublicDnsName]
#-------for root stack----------#
  InstanceProfile:
    Description: Instance Profile
    Value: !Ref 'InstanceProfile'
  InstanceIAMRole:
    Description: Instance IAM Role
    Value: !Ref 'InstanceIAMRole'
  EC2Instance1:
    Description: EC2Instance1
    Value: !Ref 'EC2Instance1'
  IPAddress1:
    Description: IPAddress1
    Value: !Ref 'IPAddress1'
  IPAssoc1:
    Description: IPAssoc1
    Value: !Ref 'IPAssoc1'
  Eth0:
    Description: Eth0
    Value: !Ref 'Eth0'
  InstanceSecurityGroup:
    Description: InstanceSecurityGroup
    Value: !Ref 'InstanceSecurityGroup'
  Instance1Volume:
    Description: Instance1Volume
    Value: !Ref 'Instance1Volume'
  MountPoint:
    Description: MountPoint
    Value: !Ref 'MountPoint'